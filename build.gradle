apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'war'

sourceCompatibility = 1.6
version = '1.0'
baseName = 'crnweb2'

repositories {
    mavenCentral()
	mavenRepo urls: "http://www.datanucleus.org/downloads/maven2"
}

configurations{
	compile.exclude module: 'commons-logging'
	enhancer.extendsFrom compile
	gaetools
}

dependencies{
	compile	fileTree(dir: "${appengine_home}/lib/user")
	compile	fileTree(dir: "${appengine_home}/lib/user/orm")
	compile 'com.google.api-client:google-api-client:1.6.0-beta',
			'com.google.collections:google-collections:1.0',
			'org.codehaus.jackson:jackson-core-asl:1.9.4',			
			'com.googlecode.jsontoken:jsontoken:1.0',
			'jstl:jstl:1.2',
			'net.sf.jsr107cache:jsr107cache:1.1',
			'junit:junit:4.10',
			'org.springframework:spring-jdbc:3.1.1.RELEASE',
			'org.springframework:spring-webmvc:3.1.1.RELEASE',
			'taglibs:standard:1.1.2',
			'org.apache.tiles:tiles-jsp:2.2.2',
			'xalan:xalan:2.7.1',
			'org.slf4j:slf4j-api:1.5.8',
			'org.slf4j:slf4j-log4j12:1.5.8',
			'log4j:log4j:1.2.14',	
			'mysql:mysql-connector-java:5.1.6',
			'org.springframework:spring-orm:3.1.1.RELEASE',
			'org.springframework.security:spring-security-core:3.0.7.RELEASE',
			'org.springframework.security:spring-security-web:3.0.7.RELEASE',
			'org.springframework.security:spring-security-config:3.0.7.RELEASE',
			'org.springframework.security:spring-security-taglibs:3.0.7.RELEASE'
            
            
            
            
	//enhancer fileTree(dir: 'c:/Apps/appengine_enhancer_libs')
	enhancer fileTree(dir: "${appengine_home}/lib/tools/orm", include: ['datanucleus-enhancer*.jar', 'asm*.jar']) 
	gaetools fileTree(dir: "${appengine_home}/lib")
}

task crnwar(type: War) {
    baseName = 'crnweb2'
}


task (explodeWar, dependsOn: 'crnwar') << {
	ant.unzip(src: "build/libs/crnweb2-1.0.war", dest: "build/crnweb2war")
	
	ant.path (id: "enhancer.classpath"){
		ant.pathelement(location: "build/crnweb2war/WEB-INF/classes")
		ant.pathelement(path: configurations.enhancer.asPath)
	}
	ant.taskdef(name: "datanucleusenhancer", classpathref: "enhancer.classpath", classname: "org.datanucleus.enhancer.tools.EnhancerTask")		
	ant.datanucleusenhancer(classpathref: "enhancer.classpath", failonerror: true, verbose: true){
		ant.fileset(dir: "build/crnweb2war/WEB-INF/classes"){
			ant.include(name: "**/*.class")
		}
	}
}


task (enhance) << {	
	ant.path (id: "enhancer.classpath"){
		ant.pathelement(location: "build/crnweb2war/WEB-INF/classes")
		ant.pathelement(path: configurations.enhancer.asPath)
	}
	ant.taskdef(name: "datanucleusenhancer", classpathref: "enhancer.classpath", classname: "org.datanucleus.enhancer.tools.EnhancerTask")		
	ant.datanucleusenhancer(classpathref: "enhancer.classpath", failonerror: true, verbose: true){
		ant.fileset(dir: "bin"){
			ant.include(name: "**/*.class")
		}
	}
}

task(startgae) << {
	ant.property(name: "appengine.sdk.home", location:"${appengine_home}")
	ant.java(classname: "com.google.appengine.tools.KickStart", classpath: "${configurations.gaetools.asPath}", fork:"true", failonerror:"false"){
		ant.arg(value: "com.google.appengine.tools.development.DevAppServerMain")
		ant.arg(value: "--port=8888")
		ant.arg(value: "--address=localhost")
		ant.arg(value: "--jvm_flag=-Dappengine.user.timezone=UTC")		
		ant.arg(value: "build/crnweb2war")
	}
}

task(stopgae)  << {
	def command = """jps -lv"""
	def proc = command.execute()
	proc.waitFor()              
	Scanner sc = new Scanner(proc.in)
	while(sc.hasNext()){
		def res =  sc.nextLine()
		if(res.contains("DevAppServerMain")){
			def pid = res.split(" ")[0].trim()
			def killcommand = """taskkill /PID ${pid} /F"""
			def killprocess = killcommand.execute()
			println killprocess.text
		}
	}
}








